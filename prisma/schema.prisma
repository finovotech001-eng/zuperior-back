// server/prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id               String      @id @default(uuid())
  clientId         String      @unique @default(cuid())
  email            String      @unique
  password         String      // Hashed password
  name             String?
  phone            String?
  country          String?
  role             String      @default("user") // "admin", "user", "moderator"
  status           String      @default("active") // "active", "banned", "suspended"
  emailVerified    Boolean     @default(false)
  lastLoginAt      DateTime?
  createdAt        DateTime    @default(now())
  accounts         Account[]
  transactions     Transaction[]
  kyc              KYC?
  mt5Accounts      MT5Account[]
  deposits         Deposit[]
  withdrawals      Withdrawal[]
  activityLogs     ActivityLog[]
}


model KYC {
  id                    String      @id @default(uuid())
  isDocumentVerified    Boolean     @default(false)
  isAddressVerified     Boolean     @default(false)
  verificationStatus    String      @default("Pending")
  documentReference     String?
  addressReference      String?
  amlReference          String?
  documentSubmittedAt   DateTime?
  addressSubmittedAt    DateTime?
  rejectionReason       String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  user                  User        @relation(fields: [userId], references: [id])
  userId                String      @unique
}

model MT5Account {
  id               String           @id @default(uuid())
  accountId        String           @unique // MT5 Account ID from API response
  userId           String           // Link to User table
  user             User             @relation(fields: [userId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  mt5Transactions  MT5Transaction[]
  deposits         Deposit[]
}

model MT5Transaction {
  id                    String      @id @default(uuid())
  type                  String      // "Deposit" or "Withdrawal"
  amount                Float
  currency              String      @default("USD")
  status                String      @default("pending") // "pending", "completed", "failed", "rejected"
  paymentMethod         String?     // "crypto", "card", "bank", "manual"
  transactionId         String?     // External payment gateway ID or transaction hash
  comment               String?
  depositId             String?     // Link to Deposit record
  withdrawalId          String?     // Link to Withdrawal record
  userId                String?     // User who made the transaction
  processedBy           String?     // Admin who processed (approved/rejected)
  processedAt           DateTime?   // When the transaction was processed
  mt5Account            MT5Account  @relation(fields: [mt5AccountId], references: [id])
  mt5AccountId          String
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  @@index([mt5AccountId])
  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

// Add the missing Account Model
model Account {
  id              String    @id @default(uuid())
  userId          String
  user            User      @relation(fields: [userId], references: [id])
  accountType     String    // e.g., 'trading', 'wallet'
  balance         Float     @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

// Comprehensive Transaction Model for all transaction types
model Transaction {
  id              String      @id @default(uuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id])
  type            String      // 'deposit', 'withdrawal', 'transfer'
  amount          Float
  currency        String      @default("USD")
  status          String      @default("pending") // "pending", "completed", "failed", "rejected"
  paymentMethod   String?
  transactionId   String?
  description     String?
  metadata        String?     // JSON string for additional data
  depositId       String?
  deposit         Deposit?    @relation(fields: [depositId], references: [id])
  withdrawalId    String?
  withdrawal      Withdrawal? @relation(fields: [withdrawalId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt

  @@index([userId])
  @@index([depositId])
  @@index([withdrawalId])
  @@index([status])
  @@index([type])
}

// Comprehensive Deposit Model
model Deposit {
  id                      String        @id @default(uuid())
  userId                  String
  user                    User          @relation(fields: [userId], references: [id])
  mt5AccountId            String
  mt5Account              MT5Account    @relation(fields: [mt5AccountId], references: [accountId])
  amount                  Float
  currency                String        @default("USD")
  method                  String        // "manual", "crypto", "card", "bank"
  paymentMethod           String?
  transactionHash         String?       // User provided transaction hash
  proofFileUrl            String?       // Uploaded proof file URL
  bankDetails             String?       // JSON string for bank details
  cryptoAddress           String?       // Crypto address for deposit
  depositAddress          String?       // System deposit address
  externalTransactionId   String?       // External payment gateway transaction ID
  status                  String        @default("pending") // "pending", "approved", "rejected", "failed"
  rejectionReason         String?
  approvedBy              String?       // Admin user ID who approved
  approvedAt              DateTime?
  rejectedAt              DateTime?
  processedAt             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  transactions            Transaction[]

  @@index([userId])
  @@index([mt5AccountId])
  @@index([status])
  @@index([createdAt])
}

// Comprehensive Withdrawal Model
model Withdrawal {
  id                      String        @id @default(uuid())
  userId                  String
  user                    User          @relation(fields: [userId], references: [id])
  mt5AccountId            String        // MT5 Account ID
  amount                  Float
  currency                String        @default("USD")
  method                  String        // "bank", "crypto", "card"
  paymentMethod           String?
  bankDetails             String?       // JSON string for bank details
  cryptoAddress           String?       // Crypto wallet address
  walletAddress           String?       // Alternative wallet address field
  externalTransactionId   String?       // External payment gateway transaction ID
  status                  String        @default("pending") // "pending", "approved", "rejected", "failed"
  rejectionReason         String?
  approvedBy              String?       // Admin user ID who approved
  approvedAt              DateTime?
  rejectedAt              DateTime?
  processedAt             DateTime?
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  transactions            Transaction[]

  @@index([userId])
  @@index([status])
  @@index([createdAt])
}

// Activity Log Model for admin actions
model ActivityLog {
  id                String      @id @default(uuid())
  userId            String?     // User affected by the action
  adminId           String      // Admin who performed the action
  admin             User        @relation(fields: [adminId], references: [id])
  action            String      // "create", "update", "delete", "approve", "reject"
  entity            String      // "user", "deposit", "withdrawal", "kyc"
  entityId          String?     // ID of the affected entity
  ipAddress         String?     // IP address of admin
  userAgent         String?     // User agent of admin
  oldValues         String?     // JSON string of old values
  newValues         String?     // JSON string of new values
  createdAt         DateTime    @default(now())
}

// System Settings Model for admin configurations
model SystemSetting {
  id                String      @id @default(uuid())
  key               String      @unique // Setting key
  value             String      // JSON string value
  category          String      // "smtp", "payment", "limits", "general"
  description       String?     // Description of the setting
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// Role Model for user roles and permissions
model Role {
  id                String      @id @default(uuid())
  name              String      @unique // Role name
  permissions       String      // JSON array of permissions
  description       String?     // Role description
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
}

// User Role Model for many-to-many relationship
model UserRole {
  id                String      @id @default(uuid())
  userId            String
  roleId            String
  assignedAt        DateTime    @default(now())
  assignedBy        String      // Admin who assigned the role
}